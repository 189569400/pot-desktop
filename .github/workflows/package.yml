name: Package
on: push

jobs:
  change-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install git
        run: |
          sudo apt-get update
          sudo apt-get install -y git

      - name: Change Version
        run: |
          sed -i "s/\"version\":.*/\"version\": \"$(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/.\(r[0-9]\)/\-\1/')\",/g" package.json

          sed -i "s/\"version\":.*/\"version\": \"$(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' |sed 's/.\(r[0-9]\)/\-\1/')\"/g" src-tauri/tauri.conf.json

          sed -i "s/version = \"0.0.0\"/version = \"$(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' |sed 's/.\(r[0-9]\)/\-\1/')\"/g" src-tauri/Cargo.toml

          echo $(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/.\(r[0-9]\)/\-\1/')

          echo "VERSION=$(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/.r.*//g')" >> $GITHUB_ENV

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: source
          path: ./*
          if-no-files-found: error

  change-version-for-windows:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.outputstep.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install git
        run: |
          sudo apt-get update
          sudo apt-get install -y git
      - id: outputstep
        run: |
          echo "VERSION=$(git describe --tags)" >> "$GITHUB_OUTPUT"
      - name: Change Version for Windows
        run: |
          sed -i "s/\"version\":.*/\"version\": \"$(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/.r.*//g')\",/g" package.json

          sed -i "s/\"version\":.*/\"version\": \"$(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/.r.*//g')\"/g" src-tauri/tauri.conf.json

          sed -i "s/version = \"0.0.0\"/version = \"$(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/.r.*//g')\"/g" src-tauri/Cargo.toml

          echo $(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g' | sed 's/.r.*//g')

      - name: Upload Artifacts for Windows
        uses: actions/upload-artifact@v3
        with:
          name: source-win
          path: ./*
          if-no-files-found: error

  build-extension:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build Popclipext
        run: |
          cd popclip
          bash ./build.sh
          cd ..
      - name: Build SnipDo
        run: |
          cd snipdo
          bash ./build.sh
          cd ..
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Pot.popclipextz
          path: popclip/Pot.popclipextz
          if-no-files-found: error
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pot.pbar
          path: snipdo/pot.pbar
          if-no-files-found: error
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.RELEASE_TOKEN }}
          files: popclip/Pot.popclipextz
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.RELEASE_TOKEN }}
          files: snipdo/pot.pbar
  build-for-macos:
    needs: change-version
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest]
        target: [aarch64-apple-darwin, x86_64-apple-darwin]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: source
      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 19
      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies
        run: |
          rustup target add ${{ matrix.target }}
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install Dependencies
        run: pnpm install
      - name: Code Format
        run: pnpm prettier --write .
      - name: Change tray icon
        run: |
          sed -i '' "s/\"iconPath\":.*/\"iconPath\": \"icons\/tray.ico\",/g" src-tauri/tauri.conf.json
      - name: Build and Package
        run: |
          echo ${{ env.VERSION }}
          export TAURI_PRIVATE_KEY="${{ secrets.TAURI_PRIVATE_KEY }}"
          export TAURI_KEY_PASSWORD="${{ secrets.TAURI_KEY_PASSWORD }}"
          pnpm tauri build --target ${{ matrix.target }}
      - name: Change File Name
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          sudo mv src-tauri/target/aarch64-apple-darwin/release/bundle/macos/pot.app.tar.gz src-tauri/target/aarch64-apple-darwin/release/bundle/macos/pot_${{ env.VERSION }}_aarch64.app.tar.gz
          sudo mv src-tauri/target/aarch64-apple-darwin/release/bundle/macos/pot.app.tar.gz.sig src-tauri/target/aarch64-apple-darwin/release/bundle/macos/pot_${{ env.VERSION }}_aarch64.app.tar.gz.sig
      - name: Change File Name
        if: matrix.target == 'x86_64-apple-darwin'
        run: |
          echo ${{ env.VERSION }}
          sudo mv src-tauri/target/x86_64-apple-darwin/release/bundle/macos/pot.app.tar.gz src-tauri/target/x86_64-apple-darwin/release/bundle/macos/pot_${{ env.VERSION }}_x86_64.app.tar.gz
          sudo mv src-tauri/target/x86_64-apple-darwin/release/bundle/macos/pot.app.tar.gz.sig src-tauri/target/x86_64-apple-darwin/release/bundle/macos/pot_${{ env.VERSION }}_x86_64.app.tar.gz.sig
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pot_${{ matrix.target }}.dmg
          path: src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
          if-no-files-found: error
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.RELEASE_TOKEN }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.RELEASE_TOKEN }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app*

  build-for-linux:
    needs: change-version
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest]
        target: [x86_64-unknown-linux-gnu]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: source
      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 19
      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies
        run: |
          rustup target add ${{ matrix.target }}
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: Install Dependencies
        run: pnpm install
      - name: Code Format
        run: pnpm prettier --write .
      - name: Build and Package
        run: |
          export TAURI_PRIVATE_KEY="${{ secrets.TAURI_PRIVATE_KEY }}"
          export TAURI_KEY_PASSWORD="${{ secrets.TAURI_KEY_PASSWORD }}"
          pnpm tauri build --target ${{ matrix.target }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pot_${{ matrix.target }}.deb
          path: src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
          if-no-files-found: error
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pot_${{ matrix.target }}.AppImage
          path: src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage
          if-no-files-found: error
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.RELEASE_TOKEN }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.RELEASE_TOKEN }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage*
  build-for-windows:
    needs: change-version-for-windows
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]
        target: [x86_64-pc-windows-msvc]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: source-win
      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 19
      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies
        run: |
          rustup target add ${{ matrix.target }}
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install Dependencies
        run: pnpm install
      - name: Code Format
        run: pnpm prettier --write .
      - name: Build and Package
        run: |
          $env:TAURI_PRIVATE_KEY="${{ secrets.TAURI_PRIVATE_KEY }}"
          $env:TAURI_KEY_PASSWORD="${{ secrets.TAURI_KEY_PASSWORD }}"
          pnpm tauri build --target ${{ matrix.target }}
      - name: touch config file
        run: New-item src-tauri/target/${{ matrix.target }}/release/config.toml
      - name: portable zip
        uses: vimtor/action-zip@v1.1
        with:
          files: src-tauri/target/${{ matrix.target }}/release/pot.exe src-tauri/target/${{ matrix.target }}/release/config.toml
          dest: pot_portable_x64.zip
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pot_${{ matrix.target }}.msi
          path: src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
          if-no-files-found: error
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pot_portable_x64.zip
          path: pot_portable_x64.zip
          if-no-files-found: error
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.RELEASE_TOKEN }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi*
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.RELEASE_TOKEN }}
          files: pot_portable_x64.zip
      - name: Upload WinGet
        if: startsWith(github.ref, 'refs/tags')
        uses: vedantmgoyal2009/winget-releaser@v2
        with:
          identifier: Pylogmon.pot
          version: ${{needs.change-version-for-windows.outputs.version}}
          installers-regex: '\.msi$'
          token: ${{ secrets.RELEASE_TOKEN }}
  build-for-deepin:
    needs: change-version
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest]
        target: [universal]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: source
      - name: Build for Deepin
        uses: ./actions/build-for-deepin
      - name: Change Name
        run: |
          name=$(ls src-tauri/target/release/bundle/deb/*.deb)
          new_name=${name%.*}_${{ matrix.target }}.deb
          sudo mv src-tauri/target/release/bundle/deb/*.deb ${new_name}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pot_${{ matrix.target }}.deb
          path: src-tauri/target/release/bundle/deb/*.deb
          if-no-files-found: error
      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG
          token: ${{ secrets.RELEASE_TOKEN }}
          files: src-tauri/target/release/bundle/deb/*.deb
